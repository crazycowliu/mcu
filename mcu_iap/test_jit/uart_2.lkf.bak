# LINK COMMAND FILE AUTOMATICALLY GENERATED BY STVD:
#  * TOTALLY IF AUTO MODE IS ENABLED
#  * ONLY INSIDE MARKERS IN SEMI-AUTO MODE
#
# CHOOSE THE CUSTOM MODE IN STVD IN ORDER TO HAVE FULL CONTROL OVER THIS FILE.
#
# Sections delimited by <BEGIN ...> and <END ...> markers are reserved for
# STVD: DO NOT MODIFY INSIDE.
#
# Manual modifications are allowed OUTSIDE these sections, WHEN STVD AUTO MODE
# IS DISABLED.
#
# CAUTION:
#  * Changing from Custom to Semi-Auto mode removes modifications in
#    STVD-reserved sections
#  * Changing to Auto mode removes all modifications.
#
# In Semi-Auto mode, you are allowed to remove <BEGIN ...> and <END ...> markers
# in order to gain control over the concerned sections. As a consequence any
# modification from the STVD graphical interface concerning this section will be
# ignored.
#
# Please refer to Cosmic User Manuals before any modification.
# Note that errors in editing this file may have unpredictable results when
# running STVD.

# Segment configuration - section reserved for STVD
#<BEGIN SEGMENT_CONF>

# Segment Zero Page:
+seg .bsct -b 0x0 -m 0x100 -n .bsct
+seg .ubsct -a .bsct -n .ubsct
+seg .bit -a .ubsct -n .bit -id
+seg .share -a .bit -n .share -is

# Segment Ram:
+seg .data -b 0x100 -m 0x1300 -n .data
+seg .bss -a .data -n .bss
+seg .FLASH_CODE -a .bss -n .FLASH_CODE -ic
Debug\stm8s_flash.o

# Segment Code,Constants:
#+seg .const -b 0x8080 -m 0x1ff80 -n .const -it
+seg .text   -b 0x8080 -m 0x1ff80 -n .text
+seg .const  -a .text -n .const
#IAP progrogram starts here
Debug\iap.o

# Segment Eeprom:
+seg .eeprom -b 0x4000 -m 0x800 -n .eeprom

# Interrupt vectors file - section reserved for STVD
#<BEGIN VECTOR_FILE>
#+seg .text   -b 0x8000 -k -n .vector
#+seg .const -b 0x8000 -k
+seg .const -b 0x8000 
Debug\stm8_interrupt_vector.o
#<END VECTOR_FILE>

#runtime  startup  code

#debug\crts.o: initialize the bss, initialize the stack pointer, call main()
#crtsi.sm8: Do crts.o does and
#           Locate the initialized data after the first code segment or
#           Locate the initialized data after the -it segment or
#Startup      Initialize      From Table in
#crtsi(0).s   @near           @near
#crtsx(0).s   @near and @far  @near
#crtsif(0).s  @near           @far
#crtsxf(0).s  @near and @far  @far
#for application smaller than 64K, startup name ending with ¡®0¡¯.
#our app use crtsi0.sm8 to Initialize @near global variable initialed data from @near ROM

#Memory Model   app size  function pointers(default)  Data pointers(default)    global variables(default)
# mods0         < 64K     @near pointers (2 bytes)    @near pointers (2 bytes)  short range (@tiny)
# modsl0        < 64K     @near pointers (2 bytes)    @near pointers (2 bytes)  long range  (@near)
# mods          > 64K     @far  pointers (3 bytes)    @near pointers (2 bytes)  short range (@tiny)
# modsl         > 64K     @far  pointers (3 bytes)    @near pointers (2 bytes)  long range  (@near)
# our MCU choose mods0
#<BEGIN STARTUP_FILE>
crtsi0.sm8
#<END STARTUP_FILE>

#------------------------------------------------------------------------------------------
#start of updated APP
# get all text in stm8s_it.o and main.o into segment main_code
# get all const in stm8s_it.o and main.o into segment main_const
+seg .text  -b 0x9080   -it
#<BEGIN OBJECT_FILES>
Debug\stm8s_it.o
Debug\main.o

#<END SEGMENT_CONF>

Debug\main_it.o
Debug\stm8s_clk.o
Debug\stm8s_gpio.o
Debug\stm8s_uart1.o
Debug\stm8s_uart3.o
#<END OBJECT_FILES>

# Library list - section reserved for STVD
#<BEGIN LIBRARY_FILES>
libis0.sm8
libm0.sm8
#<END LIBRARY_FILES>


# Defines - section reserved for STVD
#<BEGIN DEFINED_VARIABLES>
+def __endzp=@.ubsct      # end of uninitialized zpage
+def __memory=@.bss       # end of bss segment
+def __startmem=@.FLASH_CODE
+def __endmem=0x13ff
#0x1400 = 5K
#0x1800 = 6K
+def __stack=0x17ff
#<END DEFINED_VARIABLES>
